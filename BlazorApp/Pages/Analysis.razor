@page "/Analysis"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

<PageTitle>Analysis</PageTitle>

<h1>Analysis</h1>

<RadzenButton Click=@getAuthorAnalysis Text="Author Analysis" />
<RadzenButton Click=@getFrequencyAnalysis Text="Frequency Analysis" />

@if (isItAuthor == true)
{
    <RadzenChart>
        <RadzenAreaSeries Smooth=true Data="@authorCharts" CategoryProperty="Author" ValueProperty="Frequency"
        RenderingOrder="1">
        </RadzenAreaSeries>
    </RadzenChart>
    @foreach (var author in authorAnalysis)
    {
        <p>@author.author</p>
        @foreach (var freq in @author.frequencies)
        {
            <p>@freq.frequency commits on @freq.date.ToString("MMMM dd, yyyy")</p>
        }
    }
}

@if (isItFrequency == true)
{
    <RadzenChart>
        <RadzenAreaSeries Smooth=true Data="@frequencyAnalysis" CategoryProperty="date" ValueProperty="frequency"
        RenderingOrder="1">
        </RadzenAreaSeries>
    </RadzenChart>

    @foreach (var freq in @frequencyAnalysis)
    {
        <p>@freq.frequency commits on @freq.date.ToString("MMMM dd, yyyy")</p>
    }
}


@code {
    private AuthorDTO[] authorAnalysis = new AuthorDTO[] { };
    private FrequencyDTO[] frequencyAnalysis = new FrequencyDTO[] { };

    private List<AuthorChart> authorCharts = new List<AuthorChart>();

    bool isItAuthor;
    bool isItFrequency;

    bool active = false;

    protected async Task getAuthorAnalysis()
    {
        isItAuthor = true;
        isItFrequency = false;

        if(!active && authorAnalysis.Length == 0) {
            active = true;
            authorAnalysis = await Http.GetFromJsonAsync<AuthorDTO[]>("https://localhost:7024/analysis/Mlth/BDSAProject/author");
            active = false;
        }
        authorCharts = getAuthorDataToChart();
    }

    protected async Task getFrequencyAnalysis()
    {
        isItFrequency = true;
        isItAuthor = false;

        if(!active && frequencyAnalysis.Length == 0) {
            active = true;
            frequencyAnalysis = await
            Http.GetFromJsonAsync<FrequencyDTO[]>("https://localhost:7024/analysis/Mlth/BDSAProject/frequency");
            active = false;
        }
    }

    private List<AuthorChart> getAuthorDataToChart()
    {
        List<AuthorChart> authorCharts = new List<AuthorChart>();
        foreach (var author in authorAnalysis) 
        {
            var authorObject = new AuthorChart();
            var freqCounter = 0;
            authorObject.Author = author.author;
            foreach (var freq in author.frequencies) 
            {
                freqCounter++;   
            }
            authorObject.Frequency = freqCounter;
            authorCharts.Add(authorObject);
        }
        return authorCharts;
    }

    public class AuthorDTO
    {
        public string author { get; set; }
        public List<FrequencyDTO> frequencies { get; set; } = new List<FrequencyDTO>();
    }

    public class FrequencyDTO
    {
        public int frequency { get; set; }
        public DateTime date { get; set; }
    }

    public class AuthorChart
    {
        public string Author { get; set; }
        public int Frequency { get; set; }
    }
}