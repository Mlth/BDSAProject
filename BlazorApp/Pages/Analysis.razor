@page "/Analysis"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using GitInsight.Entities.DTOS
@inject HttpClient Http

<PageTitle>Analysis</PageTitle>

<h1>Analysis</h1>

<div class="col-md-6 col-lg-4 p-3">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Input a GitHub identifier</RadzenText>
        <RadzenTextBox Placeholder="github_user/repository_name" Change=@(args => @analysisCode.OnChange(args, "TextBox with placeholder")) Class="w-100" />
    </RadzenCard>
</div>

<RadzenButton Click=@getAuthorAnalysis Text="Author Analysis" />
<RadzenButton Click=@getFrequencyAnalysis Text="Frequency Analysis" />
<RadzenButton Click=@getForkAnalysis Text="Fork Analysis" />
<RadzenButton Click=@getFileAnalysis Text="File Analysis" />


@if (isItAuthor == true)
{
    <RadzenChart>
        <RadzenPieSeries Data="@analysisCode.authorObjects" Title="Author Frequency" CategoryProperty="author" ValueProperty="frequency"></RadzenPieSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Commit Frequency" />
        </RadzenValueAxis>
    </RadzenChart>
    
    @foreach (var author in analysisCode.authorAnalysis)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>@author.author</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var freq in @author.frequencies)
                {
                    <tr>
                        <td>@freq.frequency commits on @freq.date.ToString("dd/MM/yyyy")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (isItFrequency == true)
{
    <RadzenChart>
        <RadzenAreaSeries Smooth=true Data="@analysisCode.frequencyAnalysis" CategoryProperty="date" Title="Commits" ValueProperty="frequency" RenderingOrder="1"></RadzenAreaSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Commit Frequency" />
        </RadzenValueAxis>
    </RadzenChart>

    <table class="table">
        <thead>
            <tr>
                <th>Number of commits</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var freq in @analysisCode.frequencyAnalysis)
        {
            <tr>
                <td>@freq.frequency</td>
                <td>@freq.date.ToString("dd/MM/yyyy")</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (isItFork == true)
{
    <table class="table">
        <thead>
            <tr>
                <th>Forks</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var fork in @analysisCode.forkAnalysis)
        {
            <tr>
                <td>@fork.url</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (isItFile == true)
{
    @foreach (var commit in analysisCode.fileAnalysis)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>@commit.identifier</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var change in @commit.changes)
                {
                    <tr>
                        <td>@change</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    AnalysisCode? analysisCode { get; set; }
    bool isItAuthor;
    bool isItFrequency;
    bool isItFork;
    bool isItFile;

    bool active = false;

    protected override void OnInitialized()
    {
        analysisCode = AnalysisCode.Instance;
    }

    protected async Task getAuthorAnalysis()
    {
        isItAuthor = true;
        isItFrequency = false;
        isItFork = false;
        isItFile = false;

        if(!active && analysisCode?.repository != null) {
            active = true;
            analysisCode.authorAnalysis = await 
            Http.GetFromJsonAsync<AuthorDTO[]>("https://localhost:7024/analysis/" + analysisCode.repository + "/author");
            active = false;
            analysisCode.authorObjects = analysisCode.convertToAuthorObjects();
        }
    }

    protected async Task getFrequencyAnalysis()
    {
        isItFrequency = true;
        isItAuthor = false;
        isItFork = false;
        isItFile = false;

        if(!active && analysisCode?.repository != null) 
        {
            active = true;
            analysisCode.frequencyAnalysis = await
            Http.GetFromJsonAsync<FrequencyDTO[]>("https://localhost:7024/analysis/" + analysisCode.repository + "/frequency");
            active = false;
        }
    }

    protected async Task getForkAnalysis()
    {
        isItFork = true;
        isItFrequency = false;
        isItAuthor = false;
        isItFile = false;

        if(!active && analysisCode.repository != null) 
        {
            active = true;
            analysisCode.forkAnalysis = await
            Http.GetFromJsonAsync<ForkDTO[]>("https://localhost:7024/fork/" + analysisCode.repository);
            active = false;
        }
    }

    protected async Task getFileAnalysis()
    {
        isItFile = true;
        isItFork = false;
        isItFrequency = false;
        isItAuthor = false;

        if(!active && analysisCode.repository != null)
        {
            active = true;
            analysisCode.fileAnalysis = await 
            Http.GetFromJsonAsync<FileDTO[]>("https://localhost:7024/analysis/" + analysisCode.repository + "/files");
            active = false;
        }
    }

    protected AuthorObject[] convertToAuthorObjects() 
    {
        var authorAnalysis = analysisCode.authorAnalysis;
        var authors = new AuthorObject[authorAnalysis.Length];
        for(int i = 0; i < authorAnalysis.Length; i++) 
        {
            AuthorObject author = new AuthorObject{author = authorAnalysis[i].author, frequency = authorAnalysis[i].frequencies.Sum(item => item.frequency)};
            authors[i] = author;
        }
        return authors;
    }

    public record AuthorObject 
    {
        public string author {get; set;}
        public int frequency {get; set;}
    }
}